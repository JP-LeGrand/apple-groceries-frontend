import { Directive, Inject, Optional, } from "@angular/core";
import { SliderElementDirective } from "./slider-element.directive";
import { ValueHelper } from "./value-helper";
import { AllowUnsafeHtmlInSlider } from "./options";
import * as i0 from "@angular/core";
class SliderLabelDirective extends SliderElementDirective {
    allowUnsafeHtmlInSlider;
    _value = null;
    get value() {
        return this._value;
    }
    constructor(elemRef, renderer, changeDetectionRef, allowUnsafeHtmlInSlider) {
        super(elemRef, renderer, changeDetectionRef);
        this.allowUnsafeHtmlInSlider = allowUnsafeHtmlInSlider;
    }
    setValue(value) {
        let recalculateDimension = false;
        if (!this.alwaysHide &&
            (ValueHelper.isNullOrUndefined(this.value) ||
                this.value.length !== value.length ||
                (this.value.length > 0 && this.dimension === 0))) {
            recalculateDimension = true;
        }
        this._value = value;
        if (this.allowUnsafeHtmlInSlider === false) {
            this.elemRef.nativeElement.innerText = value;
        }
        else {
            this.elemRef.nativeElement.innerHTML = value;
        }
        // Update dimension only when length of the label have changed
        if (recalculateDimension) {
            this.calculateDimension();
        }
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: SliderLabelDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i0.ChangeDetectorRef }, { token: AllowUnsafeHtmlInSlider, optional: true }], target: i0.ɵɵFactoryTarget.Directive });
    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.2", type: SliderLabelDirective, selector: "[ngxSliderLabel]", usesInheritance: true, ngImport: i0 });
}
export { SliderLabelDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: SliderLabelDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: "[ngxSliderLabel]",
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [AllowUnsafeHtmlInSlider]
                }, {
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpZGVyLWxhYmVsLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9uZ3gtc2xpZGVyL2xpYi9zbGlkZXItbGFiZWwuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFFTCxTQUFTLEVBRVQsTUFBTSxFQUNOLFFBQVEsR0FFVCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNwRSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sV0FBVyxDQUFDOztBQUVwRCxNQUdhLG9CQUFxQixTQUFRLHNCQUFzQjtJQVlwRDtJQVhGLE1BQU0sR0FBVyxJQUFJLENBQUM7SUFDOUIsSUFBSSxLQUFLO1FBQ1AsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7SUFFRCxZQUNFLE9BQW1CLEVBQ25CLFFBQW1CLEVBQ25CLGtCQUFxQyxFQUc3Qix1QkFBZ0M7UUFFeEMsS0FBSyxDQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztRQUZyQyw0QkFBdUIsR0FBdkIsdUJBQXVCLENBQVM7SUFHMUMsQ0FBQztJQUVELFFBQVEsQ0FBQyxLQUFhO1FBQ3BCLElBQUksb0JBQW9CLEdBQVksS0FBSyxDQUFDO1FBRTFDLElBQ0UsQ0FBQyxJQUFJLENBQUMsVUFBVTtZQUNoQixDQUFDLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO2dCQUN4QyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sS0FBSyxLQUFLLENBQUMsTUFBTTtnQkFDbEMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLFNBQVMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUNsRDtZQUNBLG9CQUFvQixHQUFHLElBQUksQ0FBQztTQUM3QjtRQUVELElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ3BCLElBQUksSUFBSSxDQUFDLHVCQUF1QixLQUFLLEtBQUssRUFBRTtZQUMxQyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1NBQzlDO2FBQU07WUFDTCxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1NBQzlDO1FBRUQsOERBQThEO1FBQzlELElBQUksb0JBQW9CLEVBQUU7WUFDeEIsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7U0FDM0I7SUFDSCxDQUFDO3VHQXhDVSxvQkFBb0Isc0dBVXJCLHVCQUF1QjsyRkFWdEIsb0JBQW9COztTQUFwQixvQkFBb0I7MkZBQXBCLG9CQUFvQjtrQkFIaEMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsa0JBQWtCO2lCQUM3Qjs7MEJBV0ksTUFBTTsyQkFBQyx1QkFBdUI7OzBCQUM5QixRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBDaGFuZ2VEZXRlY3RvclJlZixcclxuICBEaXJlY3RpdmUsXHJcbiAgRWxlbWVudFJlZixcclxuICBJbmplY3QsXHJcbiAgT3B0aW9uYWwsXHJcbiAgUmVuZGVyZXIyLFxyXG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IFNsaWRlckVsZW1lbnREaXJlY3RpdmUgfSBmcm9tIFwiLi9zbGlkZXItZWxlbWVudC5kaXJlY3RpdmVcIjtcclxuaW1wb3J0IHsgVmFsdWVIZWxwZXIgfSBmcm9tIFwiLi92YWx1ZS1oZWxwZXJcIjtcclxuaW1wb3J0IHsgQWxsb3dVbnNhZmVIdG1sSW5TbGlkZXIgfSBmcm9tIFwiLi9vcHRpb25zXCI7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogXCJbbmd4U2xpZGVyTGFiZWxdXCIsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBTbGlkZXJMYWJlbERpcmVjdGl2ZSBleHRlbmRzIFNsaWRlckVsZW1lbnREaXJlY3RpdmUge1xyXG4gIHByaXZhdGUgX3ZhbHVlOiBzdHJpbmcgPSBudWxsO1xyXG4gIGdldCB2YWx1ZSgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBlbGVtUmVmOiBFbGVtZW50UmVmLFxyXG4gICAgcmVuZGVyZXI6IFJlbmRlcmVyMixcclxuICAgIGNoYW5nZURldGVjdGlvblJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsXHJcbiAgICBASW5qZWN0KEFsbG93VW5zYWZlSHRtbEluU2xpZGVyKVxyXG4gICAgQE9wdGlvbmFsKClcclxuICAgIHByaXZhdGUgYWxsb3dVbnNhZmVIdG1sSW5TbGlkZXI6IGJvb2xlYW5cclxuICApIHtcclxuICAgIHN1cGVyKGVsZW1SZWYsIHJlbmRlcmVyLCBjaGFuZ2VEZXRlY3Rpb25SZWYpO1xyXG4gIH1cclxuXHJcbiAgc2V0VmFsdWUodmFsdWU6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgbGV0IHJlY2FsY3VsYXRlRGltZW5zaW9uOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgaWYgKFxyXG4gICAgICAhdGhpcy5hbHdheXNIaWRlICYmXHJcbiAgICAgIChWYWx1ZUhlbHBlci5pc051bGxPclVuZGVmaW5lZCh0aGlzLnZhbHVlKSB8fFxyXG4gICAgICAgIHRoaXMudmFsdWUubGVuZ3RoICE9PSB2YWx1ZS5sZW5ndGggfHxcclxuICAgICAgICAodGhpcy52YWx1ZS5sZW5ndGggPiAwICYmIHRoaXMuZGltZW5zaW9uID09PSAwKSlcclxuICAgICkge1xyXG4gICAgICByZWNhbGN1bGF0ZURpbWVuc2lvbiA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5fdmFsdWUgPSB2YWx1ZTtcclxuICAgIGlmICh0aGlzLmFsbG93VW5zYWZlSHRtbEluU2xpZGVyID09PSBmYWxzZSkge1xyXG4gICAgICB0aGlzLmVsZW1SZWYubmF0aXZlRWxlbWVudC5pbm5lclRleHQgPSB2YWx1ZTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuZWxlbVJlZi5uYXRpdmVFbGVtZW50LmlubmVySFRNTCA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFVwZGF0ZSBkaW1lbnNpb24gb25seSB3aGVuIGxlbmd0aCBvZiB0aGUgbGFiZWwgaGF2ZSBjaGFuZ2VkXHJcbiAgICBpZiAocmVjYWxjdWxhdGVEaW1lbnNpb24pIHtcclxuICAgICAgdGhpcy5jYWxjdWxhdGVEaW1lbnNpb24oKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19