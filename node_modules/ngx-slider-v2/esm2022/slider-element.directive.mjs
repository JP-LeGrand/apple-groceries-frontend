import { Directive, HostBinding } from '@angular/core';
import { EventListenerHelper } from './event-listener-helper';
import { ValueHelper } from './value-helper';
import * as i0 from "@angular/core";
class SliderElementDirective {
    elemRef;
    renderer;
    changeDetectionRef;
    _position = 0;
    get position() {
        return this._position;
    }
    _dimension = 0;
    get dimension() {
        return this._dimension;
    }
    _alwaysHide = false;
    get alwaysHide() {
        return this._alwaysHide;
    }
    _vertical = false;
    get vertical() {
        return this._vertical;
    }
    _scale = 1;
    get scale() {
        return this._scale;
    }
    _rotate = 0;
    get rotate() {
        return this._rotate;
    }
    opacity = 1;
    visibility = 'visible';
    left = '';
    bottom = '';
    height = '';
    width = '';
    transform = '';
    eventListenerHelper;
    eventListeners = [];
    constructor(elemRef, renderer, changeDetectionRef) {
        this.elemRef = elemRef;
        this.renderer = renderer;
        this.changeDetectionRef = changeDetectionRef;
        this.eventListenerHelper = new EventListenerHelper(this.renderer);
    }
    setAlwaysHide(hide) {
        this._alwaysHide = hide;
        if (hide) {
            this.visibility = 'hidden';
        }
        else {
            this.visibility = 'visible';
        }
    }
    hide() {
        this.opacity = 0;
    }
    show() {
        if (this.alwaysHide) {
            return;
        }
        this.opacity = 1;
    }
    isVisible() {
        if (this.alwaysHide) {
            return false;
        }
        return this.opacity !== 0;
    }
    setVertical(vertical) {
        this._vertical = vertical;
        if (this._vertical) {
            this.left = '';
            this.width = '';
        }
        else {
            this.bottom = '';
            this.height = '';
        }
    }
    setScale(scale) {
        this._scale = scale;
    }
    setRotate(rotate) {
        this._rotate = rotate;
        this.transform = 'rotate(' + rotate + 'deg)';
    }
    getRotate() {
        return this._rotate;
    }
    // Set element left/top position depending on whether slider is horizontal or vertical
    setPosition(pos) {
        if (this._position !== pos && !this.isRefDestroyed()) {
            this.changeDetectionRef.markForCheck();
        }
        this._position = pos;
        if (this._vertical) {
            this.bottom = Math.round(pos) + 'px';
        }
        else {
            this.left = Math.round(pos) + 'px';
        }
    }
    // Calculate element's width/height depending on whether slider is horizontal or vertical
    calculateDimension() {
        const val = this.getBoundingClientRect();
        if (this.vertical) {
            this._dimension = (val.bottom - val.top) * this.scale;
        }
        else {
            this._dimension = (val.right - val.left) * this.scale;
        }
    }
    // Set element width/height depending on whether slider is horizontal or vertical
    setDimension(dim) {
        if (this._dimension !== dim && !this.isRefDestroyed()) {
            this.changeDetectionRef.markForCheck();
        }
        this._dimension = dim;
        if (this._vertical) {
            this.height = Math.round(dim) + 'px';
        }
        else {
            this.width = Math.round(dim) + 'px';
        }
    }
    getBoundingClientRect() {
        return this.elemRef.nativeElement.getBoundingClientRect();
    }
    on(eventName, callback, debounceInterval) {
        const listener = this.eventListenerHelper.attachEventListener(this.elemRef.nativeElement, eventName, callback, debounceInterval);
        this.eventListeners.push(listener);
    }
    onPassive(eventName, callback, debounceInterval) {
        const listener = this.eventListenerHelper.attachPassiveEventListener(this.elemRef.nativeElement, eventName, callback, debounceInterval);
        this.eventListeners.push(listener);
    }
    off(eventName) {
        let listenersToKeep;
        let listenersToRemove;
        if (!ValueHelper.isNullOrUndefined(eventName)) {
            listenersToKeep = this.eventListeners.filter((event) => event.eventName !== eventName);
            listenersToRemove = this.eventListeners.filter((event) => event.eventName === eventName);
        }
        else {
            listenersToKeep = [];
            listenersToRemove = this.eventListeners;
        }
        for (const listener of listenersToRemove) {
            this.eventListenerHelper.detachEventListener(listener);
        }
        this.eventListeners = listenersToKeep;
    }
    isRefDestroyed() {
        return ValueHelper.isNullOrUndefined(this.changeDetectionRef) || this.changeDetectionRef['destroyed'];
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: SliderElementDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });
    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.2", type: SliderElementDirective, selector: "[ngxSliderElement]", host: { properties: { "style.opacity": "this.opacity", "style.visibility": "this.visibility", "style.left": "this.left", "style.bottom": "this.bottom", "style.height": "this.height", "style.width": "this.width", "style.transform": "this.transform" } }, ngImport: i0 });
}
export { SliderElementDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: SliderElementDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ngxSliderElement]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { opacity: [{
                type: HostBinding,
                args: ['style.opacity']
            }], visibility: [{
                type: HostBinding,
                args: ['style.visibility']
            }], left: [{
                type: HostBinding,
                args: ['style.left']
            }], bottom: [{
                type: HostBinding,
                args: ['style.bottom']
            }], height: [{
                type: HostBinding,
                args: ['style.height']
            }], width: [{
                type: HostBinding,
                args: ['style.width']
            }], transform: [{
                type: HostBinding,
                args: ['style.transform']
            }] } });
//# sourceMappingURL=data:application/json;base64,